swagger: "2.0"
info:
  description: "REST APIs documentation with available requests and responses"
  version: "1.0.0"
  title: "APIatori"
  contact:
    email: "davide.bulbarelli@studenti.unitn.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
externalDocs:
  description: "Find out more about this project"
  url: "https://github.com/dadebulba/APIatori"
tags:
  - name: "spaces"
    description: "Spaces management APIs"
  - name: "bookings"
    description: "Bookings management APIs"
  - name: "users"
    description: "User management APIs"
  - name: "finances"
    description: "Finance management APIs"

schemes:
  - "http"
paths:
  /finances/{gid}:
    get:
      security:
        - Bearer : []
      tags:
        - "finances"
      summary: "Get finances for the specified group"
      produces:
        - "application/json"
      parameters:
        - name: "groupId"
          in: "path"
          description: "ID of group"
          required: true
          type: "string" 
        - in: query
          name: year
          type: integer
          required: false
          description: The year for the transactions history
          default: Current Year
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Finances"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Finances for spacified group not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      security:
        - Bearer : []
      tags:
        - "finances"
      summary: "Edit a balance in the history for the specified group"
      produces:
        - "application/json"
      parameters:
        - name: "groupId"
          in: "path"
          description: "ID of group"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "History object"
          required: true
          schema:
            $ref: "#/definitions/History"
      responses:
        200:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/History"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Finances for specified group not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      security:
        - Bearer : []
      tags:
        - "finances"
      summary: "Remove an history for the specified group"
      produces:
        - "application/json"
      parameters:
        - name: "groupId"
          in: "path"
          description: "ID of group"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "History object"
          required: true
          schema:
            $ref: "#/definitions/History"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Finances"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Finances for spacified group not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      security:
        - Bearer : []
      tags:
        - "finances"
      summary: "Add a new movement to balance history"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "groupId"
          in: "path"
          description: "ID of group"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "History object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/History"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Finances"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Finances for specified group not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    


  /spaces:
    get:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "List all available spaces"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            example:
              [{
              id: 1,
              name: Oratorio,
              href: localhost/bookings/123
              }]
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"

    post:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "Add a new space"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Space object that needs to be added"
          required: true
          schema:
            type: "object"
            example:
              {
                "name": "string",
              }
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            example:
              {
                "name": "string",
              }
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"

#  /spaces/{spaceId}:
#    get:
#      security:
#        - Bearer : []
#      tags:
#        - "spaces"
#      summary: "Get the searched space"
#      consumes:
#        - "application/json"
#      produces:
#        - "application/json"
#      parameters:
#        - name: "spaceId"
#          in: "path"
#          description: "ID of space to return"
#          required: true
#          type: "integer"
#          format: "int64"
#      responses:
#        200:
#          description: "Successful operation"
#          schema:
#            $ref: "#/definitions/Spaces"
#        401:
#          description: "Invalid token"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#        400:
#          description: "Bad parameters"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#        404:
#          description: "Space not found"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#    delete:
#      security:
#        - Bearer : []
#      tags:
#        - "spaces"
#      summary: "Delete the specified space"
#      consumes:
#        - "application/json"
#      produces:
#        - "application/json"
#      parameters:
#        - name: "spaceId"
#          in: "path"
#          description: "ID of space to delete"
#          required: true
#          type: "integer"
#          format: "int64"
#      responses:
#        200:
#          description: "Successful operation"
#        401:
#          description: "Invalid token"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#        400:
#          description: "Bad parameters"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#        404:
#          description: "Space not found"
#          schema:
#            $ref: "#/definitions/ApiResponse"
  /spaces/{spaceId}:
    put:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "Modify an existing space"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space to edit"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Space that need to be edit"
          required: true
          schema:
            type: "object"
            example:
              {
                "name": "string",
              }
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            example:
              {
                "name": "string",
              }
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "Delete the specified space"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space to delete"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space not found"
          schema:
            $ref: "#/definitions/ApiResponse"

  /bookings/{spaceId}:
    get:
      security:
        - Bearer : []
      tags:
        - "bookings"
      summary: "Get bookings for the specified space"
      produces:
        - "application/json"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Booking"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      security:
        - Bearer : []
      tags:
        - "bookings"
      summary: "Make a reservation for the specified space"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Booking object"
          required: true
          schema:
            type: "object"
            example: 
              {
                "from": "2019-12-29T15:57:35.649Z",
                "to": "2019-12-29T15:57:35.649Z",
                "type": "attività",
                "gid" : "abc123"
              }
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Booking"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        403:
          description: "Action forbidden, maybe the space is already reserved"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space ID not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    
  /spaces/{spaceId}/bookings/{bookingId}:
    put:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "Edit a reservation"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space"
          required: true
          type: "string"
        - name: "bookingId"
          in: "path"
          description: "ID of booking"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Booking object"
          required: true
          schema:
            type: "object"
            example: 
              {
                "from": "2019-12-29T15:57:35.649Z",
                "to": "2019-12-29T15:57:35.649Z",
                "type": "attività",
                "gid": "abc123"
              }
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Booking"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        403:
          description: "Action forbidden, maybe the space is already reserved"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space ID not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      security:
        - Bearer : []
      tags:
        - "spaces"
      summary: "Delete the specified booking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "spaceId"
          in: "path"
          description: "ID of space"
          required: true
          type: "string"
        - name: "bookingId"
          in: "path"
          description: "ID of booking to delete"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Invalid token"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Space not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /Token:
    post:
      tags:
      - users
      summary: Logs in into the account
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login 
        description: Login into your account
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
            password:
              type: string
      responses:
        200:
          description: Logged in successfully, returns the JWT
          schema:
            type: "string"
        401:
          description: Invalid Credentials
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ApiResponse"
  /Users:
    post:
      tags:
      - users
      summary: Create a new User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: "User object"
        schema:
          type: "object"
          properties: 
            name:
              type: string
            surname:
              type: string
            birthday:
              type: string
              format: date-time
            email:
              type: string
              format: email
            password:
              type: string
              format: password
            tel:
              type: "string"
            parents:
                type: "array"
                items: 
                  $ref : "#/definitions/Parents"
            educatorIn:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            collabIn:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            role:
              type: "string"
              enum:
                - "user"
                - "admin"
          required:
            - name
            - surname
            - birthday
            - email
            - password
            - parents
            - role


      responses:
        201:
          description: item created
          schema:
            $ref: '#/definitions/Users'
        400:
          description: Bad Request
    get:
      security:
        - Bearer: []
      tags:
      - users
      summary: List all the users info by UserID
      produces:
      - application/json
      responses:
        200:
          description: user data
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        400:
          description: Bad Request
        404:
          description: User not found

    put:
      security:
        - ApiKeyAuth: []
      tags:
      - users
      summary: Edit an existing User
      description: edit an existing user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: user
        required: true
        schema:
           $ref: '#/definitions/Users'
      responses:
        204:
          description: item modified 
        400:
          description: Bad Request
        401:
          description: Token not valid
        404:
          description: User not found
    delete:
      security:
        - ApiKeyAuth: []
      tags:
      - users
      summary: delete a user
      description: 
        delete a user
      responses:
        204:
          description: user deleted 
        401:
          description: Token not valid
        400:
          description: Bad Request
        404:
          description: User not found
    

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  Spaces:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      bookings:
        type: "array"
        items:
          $ref: "#/definitions/Booking"
  Booking:
    type: "object"
    properties:
      bid:
        type: "string"
      uid:
        type: "string"
      gid:
        type: "string"
      from:
        type: "string"
        format: "date-time"
      to:
        type: "string"
        format: "date-time"
      type:
        type: "string"
        enum:
          - "attività"
          - "riunione"
          - "degustazione prosecco"
          - "altro"
  Finances:
    type: "object"
    properties:
      gid:
        type: "string"
      total:
        type: "number"
        format: "float"
      history:
        type: "array"
        items:
          $ref: "#/definitions/History"
  History:
    type: "object"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      amount:
        type: "number"
        format: "float"
      causal:
        type: "string"
  Users:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      birthday:
        type: "string"
        format: "date-time"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
      tel:
        type: "string"
      parents:
        type: "array"
        items:
          $ref: "#/definitions/Parents"
      educatorIn:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      collabIn:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      role:
        type: "string"
        enum:
          - "user"
          - "admin"
  Parents:
    type: "object"
    properties:
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      tel:
        type: "string"
  Groups:
    type: "object"
    properties:
      gid:
        type: "string"
      name:
        type: "string"
      educators:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      collabs:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      bocias:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      calendarMail:
        type: "string"
  Meetings:
    type: "object"
    properties: 
      id:
        type: "string"
      weather:
        type: "object"
        properties: 
          temperature:
            type: "number"
            format: "float"
          type:
            type: "string"
            enum:
              - "soleggiato"
              - "nuvoloso"
              - "precipitazioni"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
